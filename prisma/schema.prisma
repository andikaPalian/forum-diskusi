// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  MODERATOR
}

model User {
  id String @id @default(uuid()) @map("user_id")
  avatar String @map("avatar_url") @default("")
  name String 
  email String @unique
  password String
  threads Thread[]
  comments Comment[]
  // votes Vote[]
  threadVote ThreadVote[]
  commentVote CommentVote[]
  isBanned Boolean @default(false)
  role Role @default(USER)
  cloudinaryId String @map("cloudinary_id") @default("")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([email, role])
}

model Thread {
  id String @id @default(uuid()) @map("thread_id")
  title String
  content String
  author User @relation(fields: [authorId], references: [id])
  authorId String
  comments Comment[]
  // votes Vote[]
  vote ThreadVote[]
  // totalVote Int
  cloudinaryId String @map("cloudinary_id") @default("")
  createdAt DateTime  @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id String @id @default(uuid()) @map("comment_id")
  content String
  thread Thread @relation(fields: [threadId], references: [id])
  threadId String
  author User @relation(fields: [authorId], references: [id])
  authorId String
  vote CommentVote[]
  // totalVote Int
  createdAt DateTime  @default(now())
  updatedAt DateTime @updatedAt

  // Self-referencing relationship
  // Jika NULL, berarti komentar utama
  parentId String? @map("parent_id")
  parent Comment? @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies Comment[] @relation("CommentReplies")
}

// model Vote {
//   id String @id @default(uuid()) @map("vote_id")
//   user User @relation(fields: [userId], references: [id])
//   userId String
//   thread Thread @relation(fields: [threadId], references: [id])
//   threadId String
//   type String
//   createdAt DateTime  @default(now())
//   updatedAt DateTime @updatedAt
// }

model ThreadVote {
  id String @id @default(uuid()) @map("thread_vote_id")
  user User @relation(fields: [userId], references: [id])
  userId String
  thread Thread @relation(fields: [threadId], references: [id])
  threadId String
  voteType Int
  createdAt DateTime  @default(now())
  updatedAt DateTime @updatedAt
  // Mencegah user vote lebih dari sekali per thread
  @@unique([userId, threadId])
}

model CommentVote {
  id String @id @default(uuid()) @map("comment_vote_id")
  user User @relation(fields: [userId], references: [id])
  userId String
  comment Comment @relation(fields: [commentId], references: [id])
  commentId String
  voteType Int
  createdAt DateTime  @default(now())
  updatedAt DateTime @updatedAt
  // Mencegah user vote lebih dari sekali per comment
  @@unique([userId, commentId])
}